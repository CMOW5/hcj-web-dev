
p { //selectpr
    color: blue; //property : value
}

a CSS selector as the portion of the CSS rule that tells the browser on which HTML element to apply the defined style.

"properties", the part of the CSS rule that tells the browser how to style specific aspects of the selected HTML element.

/* combining multiple selectors */
p, ul, ol {
   color: blue;
   background-color: pink;
}



-- COLOR PROPERTIES

color : This property sets the foreground color of an element's text 				content, the default is black

background-color : This property sets the background color of an element, 					   the default is transparent

body {
   background-color: teal;  /* keyword */
   background-color: #00CC00; /* hex */
   background-color: rgb(0,204,0); /*same green as above*/
}



-- FONT PROPERTIES

font-family : This property sets the font face

font-size : Font-size sets the overall scale of your text

font-weight : 	The weight of a font is the thickness of the letters,
				You can also set this property more specifically using numerical values 100, 200, 300, 400, 500, 600, 700, 800 or 900. Normal is represented as 400, whereas bold is 700.

font-style : he font style property adjusts the angle of the letters in 				 relation to the horizontal plane

text-decoration : 	Text-decoration adds a line across your text. You can 						set this line to be underneath your text, underline, 						through your text, line-through, or on top, overline. 


body {
	font-family: "Times New Roman", "New Century Schoolbook", serif;
	font-size: 2.5em;
	font-weight: bold; /*  bold, normal or lighter, or a number */
	font-style: italic; /*  */ 
	text-decoration: underline;
}



-- SPACING

padding : Padding" is the white space that sits closest to an HTML element.

border : The "border" is the area outside the padding of an HTML element

margin : An HTML element's "margin" is the white space that sits outside 			 the border. When two margins touch they "collapse" such that				 the space between the elements is equivalent to the larger of 				 the two margins

body {
    margin-top: 20px;
    margin-left: 70px;
    padding: 10px 15px 20px 25px; /* top, right, bottom, left */
    padding : 10px /* all sides */
}



-- SELECTORS

* Classes

Classes are an HTML attribute that specifies a name for a group of elements on the page. You can apply the class name to as many elements as you like, even if they are of different HTML tag types. (navbar links)
Group HTML elements with similar style using classes

<p class="className">The intro paragraph</p>

.className {
    color: blue;
}

* IDs

An ID is an HTML attribute that specifies a name or unique identifier for a particular HTML element. They are like classes with a very important distinction: the value of the ID attribute must be unique throughout the document. (payButton, homeButton)
Specifically style any single element on a page using IDs

<p id="MyFirstId"> This is an extra special paragraph </p>

#MyFirstId {
    color: blue;
}

* Pseudo-classes

Pseudo-classes are a way to select HTML elements based on their state as opposed to their HTML. Pseudo-classes must always be applied to an existing selector.
Employ pseudo classes to make HTML elements more dynamic

:link ->  style a link a user has not yet clicked
:visited -> style a link a user has clicked


a:visited {
   color: gray;
   font-style: italic;
}

:hover -> The hover pseudo-class is applied when the user points at an 			  object but doesn't activate it

li:hover {
   background-color: yellow;
}

:focus -> when a user has chosen to begin interacting with an element,			  often when the click into a form input such that the input 			  is then ready to accept keyboard input.

input:focus {
   background-color: blue;
}
	
:active -> The active pseudo-class applies when an element is 					   activated. This happens in the time between when the 				   user clicks their mouse and they release it.

* CONTEXTUAL SELECTORS

When you use two selectors separated by a space on a rule, you scope the rule to the elements that correspond to the selector on the right that are INSIDE the elements that correspond to the selector on the left

Contextual selection becomes especially useful when you structure your HTML with section tags like header, section, article and footer.

Scope CSS rules using contextual selection

// the imgs tags inside the p tag will be styled with this rule
p img {
    width: 100px;
}


-- CASCADING STYLES

it's very common for HTML elements on a page to have multiple CSS rules competing for importance. That is because CSS has a way to figure out which rule "wins" when styles are conflicting. CSS actually computes a "weight" for each style rule and the one with the greatest weight wins. the most specific rule wins! 

A rule is generally more specific if it applies to a fewer number of elements than another rule that encompasses those elements. The more facets a rule has the more specific it is.

* When pseudo-classes are applied this is more specific than without the pseudo-class. For example, p:hover will win over just p.

* Contextual selection is more specific because it scopes the rule to elements within a certain subset of those on the page. For example, a rule that applies to all the paragraphs within articles is more specific than a rule that applies to all the paragraphs on the page.

* IDs are most specific because you are directly applying them to the desired HTML element. The rule based on an ID will always win over other rules

* If two rules have the exact same weight, the one that comes later in the CSS document is what is applied.

* You can use the "!important" modifier on a CSS property so that it will guarantee that style will be applied. This is a way for you to override the calculated weight.

Build CSS rule sets with intention leveraging the cascading nature of CSS to manage conflicting rules



-- POSITIONING


* alignment 

h1 {
   text-align: center; /* center, right, left, justify */
}

 this property can only apply to block elements like paragraphs, divs and headers


* line-height

h1 {
   line-height: 1.2;
}

If you change the height of the containing HTML block, the text will remain at the top of the block. However, if you instead use the "line-height" property, then the block will grow and the text will vertically center within it.

* Width and height

p {
   width: 30%;
}

You can use pixel values for both width and height, but you'll most often want to use percentages to set these so that your elements grow and shrink as appropriate based on the screen size.

Things are a bit more complicated with using a percentage to set an element's height. This is because typically the body's height is not specified, so if you use a percentage the size won't adjust.


* min-width, max-width, min-height, max-height

img {
   width: 100%;
   max-width: 1024px;
}

Setting width and height with percentages will save you work because your design will automatically optimize for the user's screen size. However, some elements can't grow and shrink as dynamically as text can.

For example, images will get "pixelated" if you let them grow too large, and they can look really distorted. Thankfully, you can set max and min width and heights. This way, you can set a range for your image to grow and shrink where you know it will still look good. 


* Positioning with padding and margin

Once you have set the width for your element, then you can set margins as a way to position your element relative to others. One of the most commonly used margin settings is "auto". That is because if you set an element's left and right margin to auto it will be dynamically centered within its containing block.

div {
   width: 50%;
   margin-left: auto;
   margin-right: auto;
}

However, note that this only works for block HTML elements like paragraphs, divs and headers. If you want to use this to position an inline element, such as img or a, you will need to tell CSS to treat them as block elements by setting display: block;

img {
   display: block;
   width: 200px;
   margin-left: auto;
   margin-right: auto;
}


* float 

The float property liberates an element from its automatic position and lifts it up to "float" on top of other elements in the direction you specify.  You can specify float either right, left or the default of none. 

h1 {
   width: 20em;
   float: right;
}

* The Clear Property

Once you have some elements floating things can get a little messy. Its easy for floating objects to overlap, and to prevent this you can use the "clear" property.

p {
   clear: both;
}



-- RELATIVE POSITIONING 


* The position property

The "position" property sets the algorithm for how the Web browser will compute the way the HTML elements are placed on the page. There are four different value options for the position property: 

-> relative - It is the best way to build on the dynamic layout methods. This lets you specify where an HTML element should be relative to where it would be by default.

-> static - This is the default setting and will place an element wherever the web browser computes it should be. 

-> fixed - This places an element in a specific location within the window. You can use this to set an element to remain where it is regardless of scrolling. This was used heavily when "frames" were popular, however now it should be used very sparingly. 

-> absolute - This allows you to position elements relative to their containing box. This removes an element from its normal flow (just like a floating element) so it can be difficult to control and make a layout that is truly dynamic. 

div {
   position: relative;
}

Once you've set the position to "relative" that frees you up to set the top, right, bottom and left properties- otherwise known as the "box offsets". These properties specify the distance between this object and its normal static position and the corner of the box that we are specifying.

For example, if we set the "left" to be "30px", it will move the element 30px to the right away from the left of where it was placed by default.

p {
   position: relative;
   left: 10px;
}

Note that position is not an inherited property so you will have to apply it individually to each element. Because of this it is best to use this approach to designing your layout sparingly and should only be used after you cannot achieve your desired layout with alignment or floating. 
